functions {
  #include /include/SR.stan
  #include /include/gnormal_lpdf.stan
  #include /include/veq.stan
  #include /include/vand.stan
  #include /include/rsub.stan
  #include /include/which.stan
  #include /include/mat_lmult.stan
}

data {
  // info for observed data
  int<lower=1> N;                      // total number of cases in all pops and years
  int<lower=1,upper=N> pop[N];         // population index
  int<lower=1,upper=N> year[N];        // brood year index
  // info for forward simulations
  int<lower=0> N_fwd;                  // total number of cases in forward simulations
  int<lower=1,upper=N> pop_fwd[N_fwd]; // population index for forward simulations
  int<lower=1,upper=N+N_fwd> year_fwd[N_fwd]; // brood year index for forward simulations
  vector<lower=0>[N_fwd] A_fwd; // habitat area for each forward simulation
  vector<lower=0,upper=1>[N_fwd] F_rate_fwd; // fishing mortality for forward simulations
  vector<lower=0,upper=1>[N_fwd] B_rate_fwd; // broodstock take rate for forward simulations
  vector<lower=0,upper=1>[N_fwd] p_HOS_fwd;  // p_HOS for forward simulations
  // smolt production
  int<lower=1> SR_fun;                 // S-R model: 1 = exponential, 2 = BH, 3 = Ricker, 4 = Hassell
  int<lower=1> smolt_age;              // smolt age
  vector<lower=0>[N] A;                // habitat area associated with each spawner abundance obs
  int<lower=0> K_alpha;                // number of intrinsic productivity covariates
  matrix[N,K_alpha] X_alpha;           // intrinsic productivity covariates
  real prior_mu_alpha[2];              // prior mean, sd for hyper-mean log intrinsic productivity
  int<lower=0> K_Mmax;                 // number of maximum smolt recruitment covariates
  matrix[N,K_Mmax] X_Mmax;             // maximum smolt recruitment covariates
  real prior_mu_Mmax[2];               // prior mean, sd for hyper-mean log maximum smolt recruitment
  int<lower=0> K_M;                    // number of smolt recruitment covariates
  row_vector[K_M] X_M[N];              // smolt recruitment covariates
  // downstream, SAR, upstream survival
  int<lower=0> K_D;                    // number of juvenile downstream survival covariates
  matrix[max(append_array(year,year_fwd)),K_D] X_D; // downstream survival covariates (if none, use vector of zeros)
  int<lower=1,upper=max(year)> N_prior_D; // number of years with prior downstream survival
  int<lower=1,upper=max(year)> which_prior_D[N_prior_D]; // which years with prior downstream survival
  vector[N_prior_D] mu_prior_D;        // annual prior means of logit downstream survival
  vector[N_prior_D] sigma_prior_D;     // annual prior SDs of logit downstream survival
  int<lower=0> K_SAR;                  // number of smolt-to-adult survival (SAR) covariates
  matrix[max(append_array(year,year_fwd)),K_SAR] X_SAR; // SAR covariates (if none, use vector of zeros)
  int<lower=1,upper=max(year)> N_prior_SAR; // number of years with prior SAR
  int<lower=1,upper=max(year)> which_prior_SAR[N_prior_SAR]; // which years with prior SAR
  vector[N_prior_SAR] mu_prior_SAR;    // annual prior means of logit SAR
  vector[N_prior_SAR] sigma_prior_SAR; // annual prior SDs of logit SAR
  int<lower=0> K_U;                    // number of adult upstream survival covariates
  matrix[max(append_array(year,year_fwd)),K_U] X_U; // upstream survival covariates (if none, use vector of zeros)
  int<lower=1,upper=max(year)> N_prior_U; // number of years with prior upstream survival
  int<lower=1,upper=max(year)> which_prior_U[N_prior_U]; // which years with prior upstream survival
  vector[N_prior_U] mu_prior_U;        // annual prior means of logit upstream survival
  vector[N_prior_U] sigma_prior_U;     // annual prior SDs of logit upstream survival
  // spawner abundance
  int<lower=1,upper=N> N_S_obs;        // number of cases with non-missing spawner abundance obs 
  int<lower=1,upper=N> which_S_obs[N_S_obs]; // cases with non-missing spawner abundance obs
  vector<lower=0>[N] S_obs;            // observed annual total spawner abundance (not density)
  real prior_tau_S[3];                 // prior mean, scale, shape for spawner observation error SD
  // spawner age structure
  int<lower=2> N_age;                  // number of adult age classes
  int<lower=2> max_age;                // maximum adult age
  matrix<lower=0>[N,N_age] n_age_obs;  // observed wild spawner age frequencies (all zero row = NA)  
  vector<lower=0>[N_age] prior_mu_p;   // prior concentration for mean age distribution
  // H/W composition
  int<lower=0,upper=N> N_H;            // number of years with p_HOS > 0
  int<lower=1,upper=N> which_H[N_H];   // years with p_HOS > 0
  int<lower=0> n_W_obs[N_H];           // count of wild spawners in samples
  int<lower=0> n_H_obs[N_H];           // count of hatchery spawners in samples
  // fishery and hatchery removals
  vector[N] F_rate;                    // fishing mortality rate of wild adults
  vector<lower=0,upper=1>[N_age] age_F; // is age a (non)selected (0/1) by fishery?
  int<lower=0,upper=N> N_B;            // number of years with B_take > 0
  int<lower=1,upper=N> which_B[N_B];   // years with B_take > 0
  vector[N_B] B_take_obs;              // observed broodstock take of wild adults
  vector<lower=0,upper=1>[N_age] age_B; // is age a (non)selected (0/1) in broodstock?
}

transformed data {
  int<lower=1,upper=N> N_pop = max(pop);   // number of populations
  int<lower=1,upper=N> N_year = max(year); // number of years, not including fwd simulations
  int<lower=1> pop_year[N];                // index of years within each pop, starting at 1
  int<lower=1,upper=N> N_year_all;         // total number of years, including forward simulations
  int<lower=1> ocean_ages[N_age];          // ocean ages
  int<lower=1> max_ocean_age = max_age - smolt_age; // maximum ocean age
  int<lower=1> min_ocean_age = max_ocean_age - N_age + 1; // minimum ocean age
  int<lower=2> ages[N_age];               // adult ages
  vector[N_age] ones_N_age = rep_vector(1,N_age); // for rowsums of p matrix 
  vector[N] ones_N = rep_vector(1,N);     // for elementwise inverse of rowsums 
  int<lower=0> n_HW_obs[N_H];             // total sample sizes for H/W frequencies
  int<lower=0,upper=N> fwd_init_indx[N_fwd,N_age]; // links "fitted" brood years to recruits in forward sims
  vector[max_age*N_pop] mu_S_init;        // prior mean of total spawner abundance in years 1:max_age
  real sigma_S_init = sd(log(S_obs[which_S_obs])); // prior log-SD of spawner abundance in years 1:max_ocean_age
  matrix[N_age,max_age*N_pop] mu_q_init;  // prior counts of wild spawner age distns in years 1:max_age
  
  N_year_all = max(append_array(year, year_fwd));
  for(a in min_ocean_age:max_ocean_age)
  {
    ocean_ages[a] = a;
    ages[a] = smolt_age + a;
  }
  for(i in 1:N_H) n_HW_obs[i] = n_H_obs[i] + n_W_obs[i];
  
  pop_year[1] = 1;
  for(i in 1:N)
  {
    if(i == 1 || pop[i-1] != pop[i])
      pop_year[i] = 1;
    else
      pop_year[i] = pop_year[i-1] + 1;
  }
  
  fwd_init_indx = rep_array(0, N_fwd, N_age);
  for(i in 1:N_fwd)
  {
    for(a in 1:N_age)
    {
      if(year_fwd[i] - ages[a] < min(rsub(year_fwd, veq(pop_fwd, pop_fwd[i]))))
        fwd_init_indx[i,a] = which(vand(veq(pop, pop_fwd[i]), veq(year, year_fwd[i] - ages[a])));
    }
  }
  
  for(i in 1:max_ocean_age)
  {
    int N_orphan_age = N_age - max(i - min_ocean_age, 0); // number of orphan age classes
    int N_amalg_age = N_age - N_orphan_age + 1; // number of amalgamated age classes
    
    for(j in 1:N_pop)
    {
      int ii = (j - 1)*max_ocean_age + i; // index into S_init, q_init

      // S_init prior mean that scales observed log-mean by fraction of orphan age classes
      mu_S_init[ii] = mean(log(S_obs[which_S_obs])) + log(N_orphan_age) - log(N_age);
      
      // prior on q_init that implies q_orphan ~ Dir(1)
      mu_q_init[,ii] = append_row(rep_vector(1.0/N_amalg_age, N_amalg_age), 
                                  rep_vector(1, N_orphan_age - 1));
    }
  }
}

parameters {
  // smolt recruitment
  real mu_alpha;                         // hyper-mean log intrinsic productivity
  vector[K_alpha] beta_alpha;            // regression coefs for log alpha
  real<lower=0> sigma_alpha;             // hyper-SD log intrinsic productivity
  vector[N_pop] zeta_alpha;              // log intrinsic prod (Z-scores)
  real mu_Mmax;                          // hyper-mean log asymptotic recruitment
  vector[K_Mmax] beta_Mmax;              // regression coefs for log Mmax
  real<lower=0> sigma_Mmax;              // hyper-SD log asymptotic recruitment
  vector[N_pop] zeta_Mmax;               // log asymptotic recruitment (Z-scores)
  real<lower=-1,upper=1> rho_alphaMmax;  // correlation between log(alpha) and log(Mmax)
  vector[K_M] beta_M;                    // regression coefs for smolt recruitment
  real<lower=-1,upper=1> rho_M;          // AR(1) coef for spawner-smolt productivity
  real<lower=0> sigma_M;                 // spawner-smolt process error SD
  vector[N] zeta_M;                      // smolt recruitment process errors (Z-scores)
  vector<lower=0>[smolt_age*N_pop] M_init; // true smolt abundance in years 1:smolt_age
  // downstream, SAR, upstream survival
  real mu_D;                             // mean logit downstream juvenile survival 
  vector[K_D] beta_D;                    // regression coefs for logit downstream juvenile survival
  real<lower=-1,upper=1> rho_D;          // AR(1) coef for logit downstream juvenile survival
  real<lower=0> sigma_D;                 // process error SD of logit downstream juvenile survival
  vector[N_year_all] zeta_D;             // logit downstream juvenile survival process errors (Z-scores)
  real mu_SAR;                           // mean logit smolt-to-adult survival 
  vector[K_SAR] beta_SAR;                // regression coefs for logit smolt-to-adult survival
  real<lower=-1,upper=1> rho_SAR;        // AR(1) coef for logit smolt-to-adult survival
  real<lower=0> sigma_SAR;               // process error SD of logit smolt-to-adult survival
  vector[N_year_all] zeta_SAR;           // logit smolt-to-adult survival process errors (Z-scores)
  real mu_U;                             // mean logit upstream adult survival 
  vector[K_U] beta_U;                    // regression coefs for logit upstream adult survival
  real<lower=-1,upper=1> rho_U;          // AR(1) coef for logit upstream adult survival
  real<lower=0> sigma_U;                 // process error SD of logit upstream adult survival
  vector[N_year_all] zeta_U;             // logit upstream adult survival process errors (Z-scores)
  // spawner age structure
  simplex[N_age] mu_p;                   // among-pop mean of age distributions
  vector<lower=0>[N_age-1] sigma_pop_p;  // among-pop SD of mean log-ratio age distributions
  cholesky_factor_corr[N_age-1] L_pop_p; // Cholesky factor of among-pop correlation matrix of mean log-ratio age distns
  matrix[N_pop,N_age-1] zeta_pop_p;      // population mean log-ratio age distributions (Z-scores)
  vector<lower=0>[N_age-1] sigma_p;      // SD of log-ratio cohort age distributions
  cholesky_factor_corr[N_age-1] L_p;     // Cholesky factor of correlation matrix of cohort log-ratio age distributions
  matrix[N,N_age-1] zeta_p;              // log-ratio cohort age distributions (Z-scores)
  // H/W composition, removals
  vector<lower=0,upper=1>[N_H] p_HOS;     // true p_HOS in years which_H
  vector<lower=0,upper=1>[N_B] B_rate;    // true broodstock take rate when B_take > 0
  // initial spawners, observation error
  vector<lower=0>[max_ocean_age*N_pop] S_init; // true total spawner abundance in years 1:max_ocean_age
  simplex[N_age] q_init[max_ocean_age*N_pop];  // true wild spawner age distributions in years 1:max_ocean_age
  real<lower=0> tau_S;                   // observation error SD of total spawners
}

transformed parameters {
  // smolt recruitment
  vector<lower=0>[N_pop] alpha;          // intrinsic productivity 
  vector<lower=0>[N] alpha_Xbeta;        // intrinsic productivity including covariate effects
  vector<lower=0>[N_pop] Mmax;           // asymptotic recruitment 
  vector<lower=0>[N] Mmax_Xbeta;         // maximum recruitment including covariate effects
  vector<lower=0>[N] M_hat;              // expected smolt abundance (not density) by brood year
  vector[N] epsilon_M;                   // process error in smolt abundance by brood year 
  vector<lower=0>[N] M0;                 // true smolt abundance (not density) by brood year
  vector<lower=0>[N] M;                  // true smolt abundance (not density) by outmigration year
  vector<lower=0>[SR_fun == 4 ? 1 : 0] b;// Hassell shape parameter
  // downstream, SAR, upstream survival
  vector[N_year_all] epsilon_D;          // process error in downstream survival by outmigration year
  vector[N_year_all] s_D;                // true downstream survival by outmigration year
  vector[N_year_all] epsilon_SAR;        // process error in SAR by outmigration year
  vector[N_year_all] SAR;                // true SAR by outmigration year
  vector[N_year_all] epsilon_U;          // process error in upstream survival by return year
  vector[N_year_all] s_U;                // true upstream survival by return year
  // spawner age structure
  matrix<lower=0,upper=1>[N,N_age] q;    // true spawner age distributions
  row_vector[N_age-1] mu_alr_p;          // mean of log-ratio cohort age distributions
  matrix[N_pop,N_age-1] mu_pop_alr_p;    // population mean log-ratio age distributions
  matrix<lower=0,upper=1>[N,N_age] p;    // true adult age distributions by outmigration year
  // H/W spawner abundance, removals
  vector<lower=0>[N] S_W;                // true total wild spawner abundance
  vector[N] S_H;                         // true total hatchery spawner abundance (can == 0)
  vector<lower=0>[N] S;                  // true total spawner abundance
  vector[N] p_HOS_all;                   // true p_HOS in all years (can == 0)
  vector<lower=0,upper=1>[N] B_rate_all; // true broodstock take rate in all years
  
  // Multivariate Matt trick for [log(alpha), log(Mmax)]
  {
    matrix[2,2] L_alphaMmax;        // Cholesky factor of corr matrix of log(alpha), log(Mmax)
    matrix[N_pop,2] zeta_alphaMmax; // [log(alpha), log(Mmax)] random effects (z-scored)
    matrix[N_pop,2] eta_alphaMmax;  // log(alpha), log(Mmax)] random effects
    vector[2] sigma_alphaMmax;      // SD vector of [log(alpha), log(Mmax)]
    
    L_alphaMmax[1,1] = 1;
    L_alphaMmax[2,1] = rho_alphaMmax;
    L_alphaMmax[1,2] = 0;
    L_alphaMmax[2,2] = sqrt(1 - rho_alphaMmax^2);
    sigma_alphaMmax[1] = sigma_alpha;
    sigma_alphaMmax[2] = sigma_Mmax;
    zeta_alphaMmax = append_col(zeta_alpha, zeta_Mmax);
    eta_alphaMmax = diag_pre_multiply(sigma_alphaMmax, L_alphaMmax * zeta_alphaMmax')';
    alpha = exp(mu_alpha + eta_alphaMmax[,1]);
    alpha_Xbeta = alpha[pop] .* exp(mat_lmult(X_alpha, beta_alpha));
    Mmax = exp(mu_Mmax + eta_alphaMmax[,2]);
    Mmax_Xbeta = Mmax[pop] .* exp(mat_lmult(X_Mmax, beta_Mmax));
  }

  // AR(1) models for downstream, SAR, upstream survival
  epsilon_D[1] = zeta_D[1] * sigma_D / sqrt(1 - rho_D^2); 
  epsilon_SAR[1] = zeta_SAR[1] * sigma_SAR / sqrt(1 - rho_SAR^2); 
  epsilon_U[1] = zeta_U[1] * sigma_U / sqrt(1 - rho_U^2);
  for(i in 2:N_year_all)
  {
    epsilon_D[i] = rho_D * epsilon_D[i-1] + zeta_D[i] * sigma_D;
    epsilon_SAR[i] = rho_SAR * epsilon_SAR[i-1] + zeta_SAR[i] * sigma_SAR;
    epsilon_U[i] = rho_U * epsilon_U[i-1] + zeta_U[i] * sigma_U;
  }
  // constrain process errors to sum to 0 (columns of X should be centered)
  s_D = inv_logit(mu_D + mat_lmult(X_D,beta_D) + epsilon_D - mean(epsilon_D[1:N_year]));
  SAR = inv_logit(mu_SAR + mat_lmult(X_SAR,beta_SAR) + epsilon_SAR - mean(epsilon_SAR[1:N_year]));
  s_U = inv_logit(mu_U + mat_lmult(X_U,beta_U) + epsilon_U - mean(epsilon_U[1:N_year]));

  // Pad p_HOS and B_rate
  p_HOS_all = rep_vector(0,N);
  p_HOS_all[which_H] = p_HOS;
  B_rate_all = rep_vector(0,N);
  B_rate_all[which_B] = B_rate;
  
  // Multivariate Matt trick for age vectors
  mu_alr_p = to_row_vector(log(head(mu_p, N_age-1)) - log(mu_p[N_age]));
  mu_pop_alr_p = rep_matrix(mu_alr_p,N_pop) + diag_pre_multiply(sigma_pop_p, L_pop_p * zeta_pop_p')';
  // Inverse log-ratio (softmax) transform of cohort age distn
  {
    matrix[N,N_age-1] alr_p = mu_pop_alr_p[pop,] + diag_pre_multiply(sigma_p, L_p * zeta_p')';
    matrix[N,N_age] exp_alr_p = append_col(exp(alr_p), ones_N);
    p = diag_pre_multiply(ones_N ./ (exp_alr_p * ones_N_age), exp_alr_p);
  }
  
  // Calculate true total wild and hatchery spawners and spawner age distribution
  // and predict recruitment from brood year i
  for(i in 1:N)
  {
    int ii;                  // index into S_init and q_init
    // number of orphan age classes <lower=0,upper=N_age>
    int N_orphan_age = max(N_age - to_int(fdim(pop_year[i], min_ocean_age)), N_age); 
    vector[N_orphan_age] q_orphan; // orphan age distribution (amalgamated simplex)
    row_vector[N_age] exp_p; // exp(alr(p[i,]))
    row_vector[N_age] S_W_a; // true wild spawners by age

    // AR(1) smolt recruitment process errors  
    if(pop_year[i] == 1) 
      epsilon_M[i] = zeta_M[i]*sigma_M/sqrt(1 - rho_M^2);
    else
      epsilon_M[i] = rho_M*epsilon_M[i-1] + zeta_M[i]*sigma_M;

    // Smolt recruitment
    if(pop_year[i] <= smolt_age)
      M[i] = M_init[(pop[i]-1)*smolt_age + pop_year[i]];  // use initial values
    else
      M[i] = M0[i-smolt_age];  // smolts from appropriate brood year
    
    // Spawner recruitment and age structure
    // Use initial values for orphan age classes, otherwise use process model
    if(pop_year[i] <= max_ocean_age)
    {
      ii = (pop[i] - 1)*max_ocean_age + pop_year[i];
      q_orphan = append_row(sum(head(q_init[ii], N_age - N_orphan_age + 1)), 
                            tail(q_init[ii], N_orphan_age - 1));
    }
    
    for(a in 1:N_age)
    {
      if(pop_year[i] <= ocean_ages[a]) // use initial values
        S_W_a[a] = S_init[ii] * (1 - p_HOS_all[i]) * q_orphan[a - (N_age - N_orphan_age)];
      else // use recruitment process model
        S_W_a[a] = M[i-ocean_ages[a]] * s_D[year[i]-ocean_ages[a]] * 
                   SAR[year[i]-ocean_ages[a]] * p[i-ocean_ages[a],a] * s_U[year[i]] *
                   (1 - age_F[a]*F_rate[i]) * (1 - age_B[a]*B_rate_all[i]);
    }

    // Total spawners and age structure
    S_W[i] = sum(S_W_a);
    S_H[i] = S_W[i]*p_HOS_all[i]/(1 - p_HOS_all[i]);
    S[i] = S_W[i] + S_H[i];
    q[i,] = S_W_a/S_W[i];

    // Smolt production from brood year i
    M_hat[i] = SR(SR_fun, alpha_Xbeta[i], Mmax_Xbeta[i], S[i], A[i], b);
    M0[i] = M_hat[i] * exp(dot_product(X_M[i], beta_M) + epsilon_M[i]); 
  }
}

model {
  vector[N_B] log_B_take; // log of true broodstock take when B_take_obs > 0
  
  // Priors
  
  // smolt production
  mu_alpha ~ normal(prior_mu_alpha[1], prior_mu_alpha[2]);
  beta_alpha ~ normal(0,5);
  sigma_alpha ~ normal(0,3);
  mu_Mmax ~ normal(prior_mu_Mmax[1], prior_mu_Mmax[2]);
  beta_Mmax ~ normal(0,5);
  sigma_Mmax ~ normal(0,3);
  // log([alpha,Mmax]) ~ MVN([mu_alpha,mu_Mmax], D*R_aMmax*D), where D = diag_matrix(sigma_alpha,sigma_Mmax)
  zeta_alpha ~ std_normal();
  zeta_Mmax ~ std_normal();
  beta_M ~ normal(0,5);
  rho_M ~ gnormal(0,0.85,50);   // mildly regularize to ensure stationarity
  sigma_M ~ normal(0,3);
  zeta_M ~ std_normal();     // epsilon_M ~ AR1(rho_M, sigma_M)
  b ~ exponential(1.0);

  // downstream, SAR, upstream survival
  // prior on logit-intercepts implies Unif(0,1) prior on intercept when
  // all covariates are at their sample means
  target += log_inv_logit(mu_D) + log1m_inv_logit(mu_D);
  beta_D ~ normal(0,5);
  rho_D ~ gnormal(0,0.85,50);   // mildly regularize to ensure stationarity
  sigma_D ~ gnormal(0,2,10);
  zeta_D ~ std_normal();      // epsilon_D ~ AR1(rho_D, sigma_D)
  logit(s_D[which_prior_D]) ~ normal(mu_prior_D, sigma_prior_D); // informative prior on s_D
  target += log_inv_logit(mu_SAR) + log1m_inv_logit(mu_SAR);
  beta_SAR ~ normal(0,5);
  rho_SAR ~ gnormal(0,0.85,50); // mildly regularize to ensure stationarity
  sigma_SAR ~ gnormal(0,2,10);
  zeta_SAR ~ std_normal();   // epsilon_SAR ~ AR1(rho_SAR, sigma_SAR)
  logit(SAR[which_prior_SAR]) ~ normal(mu_prior_SAR, sigma_prior_SAR); // informative prior on SAR
  target += log_inv_logit(mu_U) + log1m_inv_logit(mu_U);
  beta_U ~ normal(0,5);
  rho_U ~ gnormal(0,0.85,50);   // mildly regularize to ensure stationarity
  sigma_U ~ gnormal(0,2,10);
  zeta_U ~ std_normal();     // epsilon_U ~ AR1(rho_U, sigma_U)
  logit(s_U[which_prior_U]) ~ normal(mu_prior_U, sigma_prior_U); // informative prior on s_U
  
  // spawner age structure
  mu_p ~ dirichlet(prior_mu_p);
  to_vector(sigma_pop_p) ~ normal(0,3);
  to_vector(sigma_p) ~ normal(0,3);
  L_pop_p ~ lkj_corr_cholesky(1);
  L_p ~ lkj_corr_cholesky(1);
  // mu_pop_alr_p[i,] ~ MVN(mu_alr_p,D*R_pop_p*D), where D = diag_matrix(sigma_pop_p)
  to_vector(zeta_pop_p) ~ std_normal();
  // age probs logistic MVN: 
  // alr_p[i,] ~ MVN(mu_pop_alr_p[pop[i],], D*R_p*D), 
  // where D = diag_matrix(sigma_p)
  to_vector(zeta_p) ~ std_normal();
  
  // removals
  log_B_take = log(S_W[which_B]) + log(q[which_B,]*age_B) + logit(B_rate); 
  // implies B_take[i] = S_W[i] * (q[i,] * ageB) * B_rate[i] / (1 - B_rate[i])
  B_take_obs ~ lognormal(log_B_take, 0.05); // penalty to force pred and obs broodstock take to match 
  
  // initial states
  // (accounting for amalgamation of q_init to q_orphan)
  M_init ~ lognormal(0.0,5.0);
  S_init ~ lognormal(mu_S_init, sigma_S_init);
  {
    matrix[N_age,max_ocean_age*N_pop] q_init_mat;
    
    for(j in 1:size(q_init)) q_init_mat[,j] = q_init[j];
    target += sum((mu_q_init - 1) .* log(q_init_mat)); // q_init[i] ~ Dir(mu_q_init[,i])
  }

  // observation error
  tau_S ~ gnormal(prior_tau_S[1], prior_tau_S[2], prior_tau_S[3]);

  // Observation model
  S_obs[which_S_obs] ~ lognormal(log(S[which_S_obs]), tau_S);  // observed spawners
  n_H_obs ~ binomial(n_HW_obs, p_HOS); // observed counts of hatchery vs. wild spawners
  target += sum(n_age_obs .* log(q));  // obs wild age freq: n_age_obs[i] ~ multinomial(q[i])
}

generated quantities {
  corr_matrix[N_age-1] R_pop_p;     // among-pop correlation matrix of mean log-ratio age distns 
  corr_matrix[N_age-1] R_p;         // correlation matrix of within-pop cohort log-ratio age distns 
  // vector<lower=0>[N_fwd] S_W_fwd;   // true total wild spawner abundance in forward simulations
  // vector[N_fwd] S_H_fwd;            // true total hatchery spawner abundance in forward simulations
  // vector<lower=0>[N_fwd] S_fwd;     // true total spawner abundance in forward simulations
  // matrix<lower=0,upper=1>[N_fwd,N_age] p_fwd; // cohort age distributions in forward simulations
  // matrix<lower=0,upper=1>[N_fwd,N_age] q_fwd; // spawner age distributions in forward simulations
  // vector<lower=0>[N_fwd] R_hat_fwd; // expected recruit abundance by brood year in forward simulations
  // vector<lower=0>[N_fwd] R_fwd;     // true recruit abundance by brood year in forward simulations
  vector[N] LL_S_obs;               // pointwise log-likelihood of total spawners
  vector[N_H] LL_n_H_obs;           // pointwise log-likelihood of hatchery vs. wild frequencies
  vector[N] LL_n_age_obs;           // pointwise log-likelihood of wild age frequencies
  vector[N] LL;                     // total pointwise log-likelihood                              
  
  R_pop_p = multiply_lower_tri_self_transpose(L_pop_p);
  R_p = multiply_lower_tri_self_transpose(L_p);
  
  // // Calculate true total wild and hatchery spawners and spawner age distribution
  // // and simulate recruitment from brood year i
  // // (Note that if N_fwd == 0, this block will not execute)
  // for(i in 1:N_fwd)
  // {
  //   vector[N_age-1] alr_p_fwd;   // temp variable: alr(p_fwd[i,])'
  //   row_vector[N_age] S_W_a_fwd; // temp variable: true wild spawners by age
  // 
  //   // Inverse log-ratio transform of cohort age distn
  //   alr_p_fwd = multi_normal_cholesky_rng(to_vector(mu_pop_alr_p[pop_fwd[i],]), L_p);
  //   p_fwd[i,] = to_row_vector(softmax(append_row(alr_p_fwd,0)));
  // 
  //   for(a in 1:N_age)
  //   {
  //     if(fwd_init_indx[i,a] != 0)
  //     {
  //       // Use estimated values from previous cohorts
  //       S_W_a_fwd[a] = R[fwd_init_indx[i,a]]*p[fwd_init_indx[i,a],a];
  //     }
  //     else
  //     {
  //       S_W_a_fwd[a] = R_fwd[i-ages[a]]*p_fwd[i-ages[a],a];
  //     }
  //   }
  // 
  //   for(a in 2:N_age)  // catch and broodstock removal (assumes no take of age 1)
  //     S_W_a_fwd[a] = S_W_a_fwd[a]*(1 - F_rate_fwd[i])*(1 - B_rate_fwd[i]);
  // 
  //   S_W_fwd[i] = sum(S_W_a_fwd);
  //   S_H_fwd[i] = S_W_fwd[i]*p_HOS_fwd[i]/(1 - p_HOS_fwd[i]);
  //   q_fwd[i,] = S_W_a_fwd/S_W_fwd[i];
  //   S_fwd[i] = S_W_fwd[i] + S_H_fwd[i];
  //   R_hat_fwd[i] = SR(SR_fun, alpha[pop_fwd[i]], Mmax[pop_fwd[i]], S_fwd[i], A_fwd[i], b);
  //   R_fwd[i] = lognormal_rng(log(R_hat_fwd[i]) + phi[year_fwd[i]], sigma);
  // }
  
  LL_S_obs = rep_vector(0,N);
  for(i in 1:N_S_obs)
    LL_S_obs[which_S_obs[i]] = lognormal_lpdf(S_obs[which_S_obs[i]] | log(S[which_S_obs[i]]), tau_S); 
  LL_n_age_obs = (n_age_obs .* log(q)) * rep_vector(1,N_age);
  LL_n_H_obs = rep_vector(0,N_H);
  for(i in 1:N_H)
    LL_n_H_obs[i] = binomial_lpmf(n_H_obs[i] | n_HW_obs[i], p_HOS[i]);
  LL = LL_S_obs + LL_n_age_obs;
  LL[which_H] = LL[which_H] + LL_n_H_obs;
}
